//=============================================================================/
//                            ALBERT YU & CO.                                  /
//=============================================================================/
//                                                                             /
//       PROJECT: 141102                                                       /
//        CLIENT: IPGPAY + BeansBox                                            /
//   DELIVERABLE: Static front-end prototype                                   /
//         CLASS: Utility                                                      /
//         TITLE: SASS Mixins                                                  /
//                                                                             /
//=============================================================================/

//**
//* GENERATE REM UNITS WITH PIXEL FALLBACK
//**

// Baseline, measured in pixels
// The value should be the same as the font-size value for the html element
// If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
// then the variable below would be 10px.

$baseline-px: 16px;

@mixin rem($property, $px-values) {
  // Convert the baseline into rems
  $baseline-rem: $baseline-px / 1rem;
  // Print the first line in pixel values
  #{$property}: $px-values;
  // If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == "number" {
    #{$property}: $px-values / $baseline-rem;
  } @else {
    // Create an empty list that we can dump values into
    $rem-values: unquote("");
    @each $value in $px-values {
      // If the value is zero or a string or a color, return unchanged input
      @if $value == 0 or type-of($value) == "string" or type-of($value) == "color" {
        $rem-values: append($rem-values, $value);
      } @else {
        $rem-values: append($rem-values, $value / $baseline-rem);
      }
    }
    // Return the property and its list of converted values
    #{$property}: $rem-values;
  }
}

//**
//* PREFIX CSS calc()
//**

// Must manually specify a fallback for browsers that don't support calc()

@mixin calc($property, $expression) {
  #{$property}: -moz-calc(#{$expression});
  #{$property}: -webkit-calc(#{$expression});
  #{$property}: calc(#{$expression});
}

//**
//* PREFIX placeholder STYLES
//**

@mixin placeholder {
  ::-webkit-input-placeholder {@content};
  :-moz-placeholder           {@content};
  ::-moz-placeholder          {@content};
  :-ms-input-placeholder      {@content};
}

//**
//* OPENTYPE FEATURES IN CSS
//**

@mixin font-feature-settings($feature-list: false) {
  // Only proceed if a list of arguments was passed
  @if $feature-list {
    // Create an empty list for the explicit syntax
    $explicit: ();

    // Create an empty list for the standard syntax
    $standard: ();

    // Create an empty list for the old Mozilla syntax
    $old-moz: ();

    // Add each listed feature to the standard and old Mozilla values
    @each $feature in $feature-list {
      $explicit: append( $explicit, '#{$feature}' 1, comma );
      $standard: append( $standard, '#{$feature}', comma );
      $old-moz: append( $old-moz, '#{$feature}=1', comma );
    }

    // Finally, print out the prefixed and non-prefixed code for all of the listed features
    -moz-font-feature-settings: $old-moz;
    -moz-font-feature-settings: $explicit;
    -moz-font-feature-settings: $standard;
    -ms-font-feature-settings: $explicit;
    -ms-font-feature-settings: $standard;
    -o-font-feature-settings: $explicit;
    -o-font-feature-settings: $standard;
    -webkit-font-feature-settings: $explicit;
    -webkit-font-feature-settings: $standard;
    font-feature-settings: $explicit;
    font-feature-settings: $standard;
  }
}

